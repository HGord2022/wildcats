print(paste(index1, index2, "adds to: ", (given_nums[index1] + given_nums[index2])))
}
}
given_nums <- c(2,7,11,15,2)
target <- 4
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((given_nums[index1] + given_nums[index2]) == target){
print(index1, index2)
break
}
}
}
given_nums <- c(2,7,11,15,2)
target <- 4
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((given_nums[index1] + given_nums[index2]) == target){
print(index1, index2)
break
}
}
}
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((given_nums[index1] + given_nums[index2]) == target){
print(index1, index2)
}
}
}
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((given_nums[index1] + given_nums[index2]) == target){
print(index1, index2)
break
}
}
}
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((given_nums[index1] + given_nums[index2]) == target){
print(index1, index2)
return
}
}
}
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((given_nums[index1] + given_nums[index2]) == target){
print(index1, index2)
return 5011
}
}
}
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((index1 == index2) & ((given_nums[index1] + given_nums[index2]) == target))
print(index1, index2)
break
}
}
given_nums <- c(2,7,11,15,2)
target <- 4
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((index1 == index2) & ((given_nums[index1] + given_nums[index2]) == target))
print(index1, index2)
break
}
}
}
given_nums <- c(2,7,11,15,2)
target <- 4
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((index1 == index2) & ((given_nums[index1] + given_nums[index2]) == target)){
print(index1, index2)
break
}
}
}
given_nums <- c(2,7,11,15,2)
target <- 4
for (index1 in 1:length(given_nums)){
for (index2 in 1:length(given_nums)){
if ((index1 == index2) & ((given_nums[index1] + given_nums[index2]) == target)){
print(index1, index2)
break
}
}
}
install.packages(c("data.table", "ggplot2", "rmarkdown", "tidyr", "tidyverse"))
library(pcadapt)
sessionInfo()
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
updateR()
1+1
install.packages("reticulate")
library("reticulate")
library(reticulate)
getwd()
install.packages("abc")
install.packages("nnet")
require(abc.data)
library(abc)
example(abc)
example(abc)
ddirichlet(3, 1)
install.packages("DirichletReg")
library(DirichletReg)
density <- ddirichlet(c(.1,.2,.7), c(1,1,1))
density <- ddirichlet(c(.1,.2,.7), c(1,1,1))
rdirichlet(20, c(1,1,1) )
rdirichlet(20, c(1,1,1))
rdirichlet(20, c(0.005,0.005,0.005))
rdirichlet(20, c(0.005,0.005,0.005))
rdirichlet(20, c(0.005,0.005,0.005))
rdirichlet(20, c(0.5,0.5,0.5))
rdirichlet(20, c(0.5,0.5,0.5))
shiny::runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
#### Make dataframe of exercises ####
exercise = c("Warm Up", rep(c("Front Lever", "Front Three", "Front Three", "Half Crimp", "Half Crimp", "Pinch Block",
"Pinch Block", "Half Crimp", "Half Crimp"), 2), "Face Pulls", "External Rotations", "Finished")
bh = 20 # Time between left and right hangs
hand = c("B", "B", rep(c("R", "L", "L", "R"), 2), "B", rep(c("L", "R", "R", "L"), 2), "B", "B", "B")
hand[hand == "B"] <- "Both"
hand[hand == "L"] <- "Left"
hand[hand == "R"] <- "Right"
df = tibble("exercise" = exercise, "hand" = hand,
"timings" = NA, "cum_timings" = NA,
"date" = as.character(Sys.Date()))
df
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
df
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
df
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp()
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp()
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
library(googlesheets)
install.packages("googlesheets")
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
library(shiny); runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('delete_me')
install.packages(shinyFiles)
install.packages("shinyFiles")
runApp('delete_me')
runApp('delete_me')
runApp('delete_me')
runApp('delete_me')
runApp('delete_me')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
runApp('coding_projects/climb_harder_analysis/hangboard_timer/app2.R')
install.packages("googledrive")
library("googledrive")
drive_auth()
drive_find()
drive_find(pattern = "hangboard_results")
drive_find(pattern = "hangboard_results*")
drive_find(type = "spreadsheet", pattern = "hangboard_results*")
gs_title(googleSheet_embed_link)
googleSheet_embed_link = "https://docs.google.com/spreadsheets/d/17qnd_BELvIaU-FIFs8tZSxY8Th0irG4Bw_CJk1Atxo8/edit#gid=0"
gs_title(googleSheet_embed_link)
googleSheet_embed_link = "https://docs.google.com/spreadsheets/d/17qnd_BELvIaU-FIFs8tZSxY8Th0irG4Bw_CJk1Atxo8/edit#gid=0"
gs_title(googleSheet_embed_link)
library(googlesheets4)
#### Imports ####
library(shiny)
library(lubridate)
library(beepr)
library(tidyverse)
library(googlesheets4)
library(googledrive)
googleSheet_embed_link = "https://docs.google.com/spreadsheets/d/17qnd_BELvIaU-FIFs8tZSxY8Th0irG4Bw_CJk1Atxo8/edit#gid=0"
options(httr_oob_default=TRUE)
drive_find(type = "spreadsheet", pattern = "hangboard_results*")
#### Imports ####
library(shiny)
library(lubridate)
library(beepr)
library(tidyverse)
library(googlesheets4)
library(googlesheets4)
library(googleSheets4)
install.packages("googleSheets4")
install.packages("googlesheets4")
install.packages("googlesheets4")
library(googlesheets4)
googleSheet_embed_link = "https://docs.google.com/spreadsheets/d/17qnd_BELvIaU-FIFs8tZSxY8Th0irG4Bw_CJk1Atxo8/edit#gid=0"
options(httr_oob_default=TRUE)
drive_find(type = "spreadsheet", pattern = "hangboard_results*")
#### Imports ####
library(shiny)
library(lubridate)
library(beepr)
library(tidyverse)
library(googlesheets4)
library(googledrive)
drive_find(type = "spreadsheet", pattern = "hangboard_results*")
gs_title(googleSheet_embed_link)
drive_get(googleSheet_embed_link)
drive_find(type = "spreadsheet", pattern = "hangboard_results*")
drive_find(type = "spreadsheet", pattern = "hangboard_results*")
#
# This is a Shiny web application for training climbing using a hangboard
devtools::install_github("r-lib/gargle")
#
# This is a Shiny web application for training climbing using a hangboard
uninstall.packages("gargle")
#
# This is a Shiny web application for training climbing using a hangboard
remove.packages("gargle")
library("gargle")
#
# This is a Shiny web application for training climbing using a hangboard
library("gargle")
#
# This is a Shiny web application for training climbing using a hangboard
devtools::install_github("r-lib/gargle")
remove.packages("fs")
#
# This is a Shiny web application for training climbing using a hangboard
devtools::install_github("r-lib/gargle")
library(googlesheets4)
data("iris")
data(iris)
df = data(iris)
df
library(datasets)
df = data(iris)
df
iris
df = iris
df
table(is.na(df))
head(df)
df = tibble(iris)
library(tidyverse)
df = tibble(iris)
df
# Check for NAs
table(is.na(df))
head(df)
# Let's try logistic regression to identify setosa:
df$is_setosa = df$Species == "setosa"
df
h_x = function(theta, x){
1/(1+e^(-theta%*%x))
}
h_x(1,2)
h_x = function(theta, x){
1/(1+exp(^(-theta%*%x)))
}
h_x = function(theta, x){
h_x = function(theta, x){
1/(1+exp(-theta%*%x))
}
h_x = function(theta, x){
1/(1+exp(-theta%*%x))
}
h_x(1,2)
g = function(z){
1/(1+exp(-z))
}
z = function(theta, x){
theta%*%x
}
dgdz = function(z){
g(z)*(1-g(z))
}
max_lik = function(x, y){
h(x)(1-h(x))
}
max_lik = function(x, y){
h(x)%*%(1-h(x))
}
max_lik(df$Sepal.Width, df$is_setosa)
g = function(z){
1/(1+exp(-z))
}
z = function(theta, x){
theta%*%x
}
h = function(theta, x){
g(z(theta, x))
}
max_lik = function(x, y){
h(x)%*%(1-h(x))
}
max_lik(df$Sepal.Width, df$is_setosa)
max_lik(df$Sepal.Width, df$is_setosa)
max_lik(df$Sepal.Width, df$is_setosa)
z = function(theta, x){
theta%*%x
}
z(df$Sepal.Width, df$is_setosa)
h = function(theta, x){
1/(1+exp(-theta%*%x))
}
h(2, c(1,2,3))
h = function(theta, x){
1/(1+exp(-theta%*%x))
}
dgdz = function(z){
g(z)*(1-g(z))
}
max_lik = function(x, y){
h(x)%*%(1-h(x))
}
max_lik(df$Sepal.Width, df$is_setosa)
max_lik(x=df$Sepal.Width, df$is_setosa)
library(installr)
updateR()
library(reticulate)
use_condaenv("wildcats_summer_env")
import("sim.model")
getwd()
setwd("~/wildcats_summer/scripts/abc")
sim <- import("sim.model")
import("sim.model")
import("sim")
import("sim.model")
import_from_path("sim/model.py")
import_from_path("sim.model")
import_from_path("sim.model")
import_from_path("sim.model", path = ".")
import_from_path("model", path = "./sim")
import("sim.model")
library(reticulate)
import("sim.model")

full_join(x, y by=c("parameter", "pod_index"))
full_join(x, y, by=c("parameter", "pod_index"))
full_join(y, y_hat, by=c("parameter", "pod_index"))
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
full_join(y, y_hat, by=c("parameter", "pod_index"))
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
df %>% ggplot()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(scales = "free")
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free")
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.5)
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_line()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7, colour=red) +
geom_abline()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7, colour="red") +
geom_abline()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7, colour="dark_red") +
geom_abline()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7, colour="darkred") +
geom_abline()
df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
ggsave("../output/plots/no_migration_1_GOF.png", p)
ggsave("../plots/no_migration_1_GOF.png", p)
p = df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
ggsave("../plots/no_migration_1_GOF.png", p)
ggsave("../plots/goodness_of_fit/no_migration_1_GOF.png", p)
ggsave("../plots/goodness_of_fit/no_migration_1_GOF.png", p, height = 5, width = 5, units = "in")
ggsave("../plots/goodness_of_fit/no_migration_1_GOF.png", p,
height = 8, width = 8, units = "in")
ggsave("../plots/goodness_of_fit/no_migration_1_GOF.png", p,
height = 8, width = 12, units = "in")
#### Imports ####
library(tidyverse)
library(abc)
#### Read in datasets ####
prior = read.csv("../../recapitation_model/output/prior.csv", )
#### Read in datasets ####
prior = read.csv("../recapitation_model/output/prior.csv", )
#### Read in datasets ####
prior = read.csv("../output/prior.csv", )
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sum_stats = read.csv("../../output/test_sum_stats.csv")
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
shared_seeds = intersect(sum_stats["random_seed"], prior["random_seed"])
#### Imports ####
library(tidyverse)
library(abc)
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
start_time <- Sys.time()
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 500, method = "ridge", tols = 0.05)
end_time <- Sys.time()
start_time-end_time
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., "tol0.05.")) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
str(prior)
start_time <- Sys.time()
source('~/wildcats_summer_2/scripts/abc/abc_new.R', echo=TRUE)
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
df_no_outliers = df %>% group_by(parameter) %>%
mutate(value = remove_outliers(value, threshold = 4))
df
df
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 4),
predicted = remove_outliers(predicted, threshold = 4))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
prior
prior["mig_length_wild"]
str(prior)
prior["mig_length_wild"]
unique(prior["mig_length_wild"])
df
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 6),
predicted = remove_outliers(predicted, threshold = 6))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
ggsave("../../plots/goodness_of_fit/with_migration_1_GOF.png", p,
height = 8, width = 12, units = "in")
prior
prior["mig_length_wild"]
as.numeric(prior$mig_length_wild)
prior$mig_length_wild + 0.1
prior$mig_length_wild = prior$mig_length_wild + 0.001
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
prior$mig_length_wild = prior$mig_length_wild + 0.001
prior$mig_length_wild
as.integer(prior$mig_length_wild)
source('~/wildcats_summer_2/scripts/abc/abc_new.R', echo=TRUE)
table(is.na(prior))
table(is.na(sum_stats))
table(is.inf(sum_stats))
table(is.infinite(sum_stats))
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior$mig_length_wild = prior$mig_length_wild
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
start_time <- Sys.time()
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 500, method = "rejection", tols = 0.05)
end_time <- Sys.time()
start_time-end_time
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., "tol0.05.")) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 6),
predicted = remove_outliers(predicted, threshold = 6))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
ggsave("../../plots/goodness_of_fit/with_migration_1_added_and0001_GOF.png", p,
height = 8, width = 12, units = "in")
prior$mig_length_wild
table(prior$mig_length_wild)
#### Imports ####
library(tidyverse)
library(abc)
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior$mig_length_wild = prior$mig_length_wild
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
table(prior$mig_length_wild)
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
start_time <- Sys.time()
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 500, method = "ridge", tols = 0.01)
end_time <- Sys.time()
start_time-end_time
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., "tol0.05.")) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 6),
predicted = remove_outliers(predicted, threshold = 6))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
#### Imports ####
library(tidyverse)
library(abc)
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior$mig_length_wild = prior$mig_length_wild
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
table(prior$mig_length_wild)
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
start_time <- Sys.time()
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 500, method = "ridge", tols = 0.01)
end_time <- Sys.time()
start_time-end_time
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., "tol0.05.")) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
#### Imports ####
library(tidyverse)
library(abc)
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior$mig_length_wild = prior$mig_length_wild
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
table(prior$mig_length_wild)
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
start_time <- Sys.time()
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 500, method = "ridge", tols = 0.01)
end_time <- Sys.time()
start_time-end_time
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., "tol0.05.")) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
table(is.na(df))
table(is.na(prior))
table(is.na(sum_stats))
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 6),
predicted = remove_outliers(predicted, threshold = 6))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
res$estim
table(is.na(res$estim))
table(is.na(data.frame(res$estim)))
table(is.na(data.frame(res$true)))
"tol"+as.character(0.05)
"tol" + as.character(0.05)
paste("tol", as.character(0.05))
paste0("tol", as.character(0.05))
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., paste0("tol", as.character(tol), "."))) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
tol = 0.01
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., paste0("tol", as.character(tol), "."))) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 6),
predicted = remove_outliers(predicted, threshold = 6))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
data.frame(res$estim$tol0.01)
temp = data.frame(res$estim$tol0.01)
temp$mig_length_wild
table(temp$mig_length_wild)
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
table(prior$mig_length_wild)
#### Imports ####
library(tidyverse)
library(abc)
#### Read in datasets ####
prior = read.csv("../../output/prior.csv", )
sum_stats = read.csv("../../output/summary_stats.csv")
sprintf("Prior rows: %s sum_stats rows: %s", nrow(prior), nrow(sum_stats))
shared_seeds = intersect(prior$random_seed, sum_stats$random_seed)
prior = prior[prior$random_seed %in% sum_stats$random_seed, ]
sum_stats = sum_stats[sum_stats$random_seed %in% prior$random_seed, ]
stopifnot(all(prior["random_seed"] == sum_stats["random_seed"]))
table(is.na(sum_stats))
prior = dplyr::select(prior, -random_seed)
sum_stats = dplyr::select(sum_stats, -random_seed)
start_time <- Sys.time()
tol = 0.01
start_time <- Sys.time()
tol = 0.01
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 1, method = "neuralnet",transf = "log", tols = tol)
end_time <- Sys.time()
start_time-end_time
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 1, method = "neuralnet",transf = "log", tols = tol)
start_time <- Sys.time()
tol = 0.01
res = cv4abc(param = data.frame(prior), sumstat = data.frame(sum_stats),
nval = 200, method = "neuralnet", tols = tol)
end_time <- Sys.time()
start_time-end_time
y_hat = data.frame(res$estim) %>%
set_names(~ str_remove(., paste0("tol", as.character(tol), "."))) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "predicted")
y = data.frame(res$true) %>%
mutate(pod_index = 1:nrow(.)) %>%
pivot_longer(cols = colnames(.)[colnames(.) != "pod_index"],
names_to = "parameter", values_to = "pseudo_observed")
df = full_join(y, y_hat, by=c("parameter", "pod_index"))
remove_outliers = function(x,threshold=2, na.rm = TRUE, ...) {
# threshold: float denoting how many iqr above and below the upper and lower quartiles to accept
qnt = quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H = threshold*IQR(x, na.rm = na.rm)
y = x
y[x < (qnt[1] - H)] = NA
y[x > (qnt[2] + H)] = NA
y
}
df
p = df %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
ggsave("../../plots/goodness_of_fit/3_migs_nnet_5.png", p,
height = 8, width = 12, units = "in")
source('~/wildcats_summer/scripts/abc/abc_new.R', echo=TRUE)
#### Imports ####
library(tidyverse)
library(abc)
source('~/wildcats_summer/scripts/abc/abc_new.R', echo=TRUE)
source('~/wildcats_summer/scripts/abc/abc_new.R', echo=TRUE)
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 6),
predicted = remove_outliers(predicted, threshold = 6))
df_no_outliers = df %>% group_by(parameter) %>%
mutate(pseudo_observed = remove_outliers(pseudo_observed, threshold = 10),
predicted = remove_outliers(predicted, threshold = 10))
p = df_no_outliers %>%
ggplot(aes(x=pseudo_observed, y=predicted)) +
facet_wrap(~parameter, scales = "free") +
geom_point(size=0.7) +
geom_abline(colour="red")
p
ggsave("../../plots/goodness_of_fit/3_migs_ridge.png", p,
height = 8, width = 12, units = "in")
